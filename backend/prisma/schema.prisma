generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant: Tenant model
model Tenant {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations to scoped entities
  users       User[]
  accounts    Account[]
  contacts    Contact[]
  deals       Deal[]
  invoices    Invoice[]
  payments    Payment[]
}

model User {
  id                                    String         @id @default(uuid())
  email                                 String         @unique
  password                              String
  role                                  Role
  createdAt                             DateTime       @default(now())
  updatedAt                             DateTime       @updatedAt
  username                              String         @unique
  phone                                 String?
  warehouseId                           String?
  warehouse                             Warehouse?     @relation("WarehouseAdmin", fields: [warehouseId], references: [id])
  DockSchedule                          DockSchedule[]
  Offer                                 Offer[]
  Route                                 Route[]
  carrierShipments                      Shipment[]     @relation("CarrierShipments")
  clientShipments                       Shipment[]     @relation("ClientShipments")
  dispatcherShipments                   Shipment[]     @relation("DispatcherShipments")
  Shipment_Shipment_transporterIdToUser Shipment[]     @relation("Shipment_transporterIdToUser")
  TransporterLocation                   TransporterLocation?
  notifications                         Notification[] @relation("UserNotifications")
  announcements                         Announcement[]  @relation("AnnouncementAuthor")
  accounts                              Account[]
  tenantId                              String?
  tenant                                Tenant?        @relation(fields: [tenantId], references: [id])
  conversationParticipants              ConversationParticipant[]
  sentMessages                          Message[]
  
  // Pick & Pack Operations Relations
  createdWaves                          Wave[]         @relation("WaveCreator")
  assignedWaves                         Wave[]         @relation("WaveAssignedPicker")
  assignedPickLists                     PickList[]     @relation("PickListAssignedPicker")
  pickTasks                             PickTask[]     @relation("PickTaskPicker")
  verifiedPickTasks                     PickTask[]     @relation("PickTaskVerifier")
  packingSlips                          PackingSlip[]  @relation("PackingSlipPacker")
  
  // Receiving & Put-Away Operations Relations
  receipts                              Receipt[]      @relation("ReceiptReceiver")
  assignedPutAwayTasks                  PutAwayTask[]  @relation("PutAwayAssignedUser")
  assignedCrossDockTasks                CrossDockTask[] @relation("CrossDockAssignedUser")
  
  // Cycle Counting Relations
  createdCycleCounts                    CycleCount[]   @relation("CycleCountCreatedBy")
  assignedCycleCounts                   CycleCount[]   @relation("CycleCountAssignedTo")
  assignedCountTasks                    CycleCountTask[] @relation("CycleCountTaskAssignedTo")
  countedItems                          CycleCountItem[] @relation("CycleCountItemCountedBy")
}

model Shipment {
  id                                String          @id @default(uuid())
  clientId                          String
  dispatcherId                      String?
  carrierId                         String?
  status                            ShipmentStatus  @default(CREATED)
  createdAt                         DateTime        @default(now())
  updatedAt                         DateTime        @default(now())
  deliveryEmail                     String
  deliveryName                      String
  deliveryPhone                     String
  description                       String?
  destination                       String
  height                            Float
  insurance                         Boolean
  length                            Float
  origin                            String
  pickupEmail                       String
  pickupName                        String
  pickupPhone                       String
  quantity                          Int
  reference                         String?
  shipmentDate                      DateTime
  specialInstructions               String?
  weight                            Float
  width                             Float
  serviceCarrierId                  String?
  trackingNumber                    String?
  transporterId                     String?
  destinationLat                    Float?
  destinationLng                    Float?
  originLat                         Float?
  originLng                         Float?
  deliveredAt                       DateTime?
  pickupStreet                      String
  pickupCity                        String
  pickupState                       String
  pickupZip                         String
  deliveryStreet                    String
  deliveryCity                      String
  deliveryState                     String
  deliveryZip                       String
  DockSchedule                      DockSchedule[]
  RouteShipment                     RouteShipment[]
  carrier                           User?           @relation("CarrierShipments", fields: [carrierId], references: [id])
  client                            User            @relation("ClientShipments", fields: [clientId], references: [id])
  dispatcher                        User?           @relation("DispatcherShipments", fields: [dispatcherId], references: [id])
  serviceCarrier                    Carrier?        @relation("ServiceCarrierShipments", fields: [serviceCarrierId], references: [id])
  User_Shipment_transporterIdToUser User?           @relation("Shipment_transporterIdToUser", fields: [transporterId], references: [id])
  warehouseId                       String?
  warehouse                         Warehouse?      @relation(fields: [warehouseId], references: [id])
  hazmat                            Boolean         @default(false)
  documents                         Document[]
  palletCount                       Int             @default(0)
  shipmentUpdates                   ShipmentUpdate[]
  
  // Pick & Pack Operations Relations
  waveOrders                        WaveOrder[]
  pickTasks                         PickTask[]
  packingSlips                      PackingSlip[]
  
  // Receiving & Cross-Dock Relations
  crossDockInbound                  CrossDockTask[] @relation("CrossDockInbound")
  crossDockOutbound                 CrossDockTask[] @relation("CrossDockOutbound")
}

model Carrier {
  id        String     @id @default(uuid())
  name      String
  code      String     @unique
  apiKey    String?
  apiSecret String?
  shipments Shipment[] @relation("ServiceCarrierShipments")
}

model CompanySettings {
  id                         String   @id @default(uuid())
  companyName                String?
  logoUrl                    String?
  
  // Existing core feature flags
  hasWarehouses              Boolean  @default(false)
  ownTransporters            Boolean  @default(false)
  useThirdPartyCarriers      Boolean  @default(true)
  enableTrackingInput        Boolean  @default(true)
  enableAddressValidation    Boolean  @default(true)
  enableRateQuotes           Boolean  @default(true)
  enablePickups              Boolean  @default(true)
  enableNotifications        Boolean  @default(true)
  enableDevTools             Boolean  @default(false)
  enableWarehouseHeatmap     Boolean  @default(true)
  
  // === WAREHOUSE MANAGEMENT FEATURES ===
  // Core Operations
  enableReceivingWorkflows     Boolean  @default(false)
  enablePickPackOperations     Boolean  @default(false)
  enableCrossDocking          Boolean  @default(false)
  enableCycleCountingAdvanced Boolean  @default(false)
  enableSlottingOptimization  Boolean  @default(false)
  enableYardManagement        Boolean  @default(false)
  enableLaborManagement       Boolean  @default(false)
  enableReturnsManagement     Boolean  @default(false)
  enableValueAddedServices   Boolean  @default(false)
  enableQualityControl       Boolean  @default(false)
  enableKittingAssembly      Boolean  @default(false)
  enableWaveManagement       Boolean  @default(false)
  
  // Advanced Features
  enableAdvancedAnalytics    Boolean  @default(false)
  enablePredictiveAnalytics  Boolean  @default(false)
  enableTaskAutomation       Boolean  @default(false)
  enableExceptionHandling    Boolean  @default(false)
  enablePerformanceTracking  Boolean  @default(false)
  enableWorkflowOptimization Boolean  @default(false)
  
  // === BUSINESS MODEL FLAGS ===
  // Service Type Flags
  is3PL                       Boolean  @default(false)
  isEcommerceFulfillment     Boolean  @default(false)
  isManufacturerWarehouse    Boolean  @default(false)
  isDistributionCenter       Boolean  @default(false)
  isRetailWarehouse          Boolean  @default(false)
  isColdStorage              Boolean  @default(false)
  isHazmatFacility           Boolean  @default(false)
  isCustomsWarehouse         Boolean  @default(false)
  
  // === BILLING & SERVICE FLAGS ===
  enableStorageBilling        Boolean  @default(false)
  enableHandlingCharges       Boolean  @default(false)
  enableTransportationBilling Boolean  @default(false)
  enableAccessorialCharges    Boolean  @default(false)
  enableClientPortals         Boolean  @default(false)
  enableMultiClientInventory  Boolean  @default(false)
  enableSLATracking          Boolean  @default(false)
  enableServiceLevelBilling  Boolean  @default(false)
  enableUsageBasedBilling    Boolean  @default(false)
  enableContractManagement   Boolean  @default(false)
  
  // === INTEGRATION FLAGS ===
  enableEDIIntegration       Boolean  @default(false)
  enableAPIAccess            Boolean  @default(false)
  enableBarcodeScanning      Boolean  @default(false)
  enableRFIDTracking         Boolean  @default(false)
  enableVoicePicking         Boolean  @default(false)
  enableMobileScanning       Boolean  @default(false)
  enableIoTSensors          Boolean  @default(false)
  enableAutomatedSorting     Boolean  @default(false)
  enableRoboticIntegration   Boolean  @default(false)
  
  // Client/Customer Features
  enableClientDashboards     Boolean  @default(false)
  enableClientReporting      Boolean  @default(false)
  enableClientNotifications  Boolean  @default(false)
  enableClientDocuments      Boolean  @default(false)
  enableClientOrderPortal    Boolean  @default(false)
  enableClientInventoryView  Boolean  @default(false)
  enableClientBilling        Boolean  @default(false)
  
  // Compliance & Security
  enableAuditTrail          Boolean  @default(false)
  enableComplianceReporting Boolean  @default(false)
  enableSecurityMonitoring  Boolean  @default(false)
  enableAccessControl       Boolean  @default(false)
  enableDataEncryption      Boolean  @default(false)
  enableGDPRCompliance      Boolean  @default(false)
  enableSOXCompliance       Boolean  @default(false)
  
  // Existing theme and integration settings
  primaryColor               String?   @default("#007AFF")
  secondaryColor             String?   @default("#FFFFFF")
  accentColor                String?   @default("#FFAA00")
  customDomain               String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  googleApiKey               String?
  useGoogleRouteOptimization Boolean  @default(false)
}

model Warehouse {
  id                                                     String          @id @default(uuid())
  name                                                   String
  address                                                String
  createdAt                                              DateTime        @default(now())
  updatedAt                                              DateTime        @default(now())
  DamageReport                                           DamageReport[]
  DockSchedule                                           DockSchedule[]
  Location                                               Location[]
  StockMovement                                          StockMovement[]
  TransferOrder_TransferOrder_fromWarehouseIdToWarehouse TransferOrder[] @relation("TransferOrder_fromWarehouseIdToWarehouse")
  TransferOrder_TransferOrder_toWarehouseIdToWarehouse   TransferOrder[] @relation("TransferOrder_toWarehouseIdToWarehouse")
  WarehouseItem                                          WarehouseItem[]
  shipments                                              Shipment[]
  administrators                                         User[]          @relation("WarehouseAdmin")
  warehouseReports                                       WarehouseReport[]
  
  // Pick & Pack Operations Relations
  waves                                                  Wave[]
  pickLists                                              PickList[]
  packingSlips                                           PackingSlip[]
  
  // Receiving & Put-Away Operations Relations
  asns                                                   ASN[]
  appointments                                           Appointment[]
  dockDoors                                              DockDoor[]
  receipts                                               Receipt[]
  putAwayTasks                                           PutAwayTask[]
  crossDockTasks                                         CrossDockTask[]
  
  // Cycle Counting Relations
  cycleCounts                                            CycleCount[]
}

model DamageReport {
  id            String        @id @default(uuid())
  warehouseId   String
  itemId        String
  quantity      Int
  description   String?
  type          IncidentType  @default(DAMAGE)
  reasonCode    String?
  photoUrls     String[]      @default([])
  reportedAt    DateTime      @default(now())
  InventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  Warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
}

model DockSchedule {
  id                 String     @id
  warehouseId        String
  transporterId      String?
  shipmentId         String?
  scheduledArrival   DateTime
  scheduledDeparture DateTime?
  status             DockStatus @default(PENDING)
  notes              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime
  Shipment           Shipment?  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  User               User?      @relation(fields: [transporterId], references: [id])
  Warehouse          Warehouse  @relation(fields: [warehouseId], references: [id])
}

model InventoryItem {
  id            String          @id
  sku           String          @unique
  name          String
  description   String?
  unit          String
  unitCost      Float?          @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  DamageReport  DamageReport[]
  StockMovement StockMovement[]
  TransferOrder TransferOrder[]
  WarehouseItem WarehouseItem[]

  // Custom SKU attribute values
  attributeValues SkuAttributeValue[]

  // Supplier for the inventory item
  supplierId    String?
  supplier      Supplier?      @relation(fields: [supplierId], references: [id])
  
  // Pick & Pack Operations Relations
  pickTasks     PickTask[]
  packingTasks  PackingTask[]
  substitutions PickTask[] @relation("PickTaskSubstitution")
  
  // Receiving & Put-Away Operations Relations
  asnItems      ASNItem[]
  receiptItems  ReceiptItem[]
  putAwayTasks  PutAwayTask[]
  crossDockTasks CrossDockTask[]
  
  // Cycle Counting Relations
  cycleCountItems CycleCountItem[] @relation("CycleCountInventoryItem")
}

model Location {
  id            String          @id
  warehouseId   String
  zone          String?
  aisle         String?
  shelf         String?
  bin           String?
  x             Float?
  y             Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Warehouse     Warehouse       @relation(fields: [warehouseId], references: [id])
  WarehouseItem WarehouseItem[]
  
  // Pick & Pack Operations Relations
  pickTasks     PickTask[]
  
  // Receiving & Put-Away Operations Relations  
  putAwayFromTasks PutAwayTask[] @relation("PutAwayFromLocation")
  putAwayToTasks   PutAwayTask[] @relation("PutAwayToLocation")
  
  // Cycle Counting Relations
  cycleCountTasks   CycleCountTask[] @relation("CycleCountTaskLocation")
  cycleCountItems   CycleCountItem[] @relation("CycleCountItemLocation")

  @@index([warehouseId])
}

model Offer {
  id            String      @id @default(uuid())
  routeId       String
  transporterId String
  status        OfferStatus @default(pending)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Route         Route       @relation(fields: [routeId], references: [id])
  User          User        @relation(fields: [transporterId], references: [id])
}

model Route {
  id            String          @id @default(uuid())
  transporterId String
  geometry      String
  createdAt     DateTime        @default(now())
  Offer         Offer[]
  User          User            @relation(fields: [transporterId], references: [id])
  RouteShipment RouteShipment[]
}

model RouteShipment {
  routeId    String
  shipmentId String
  order      Int
  status     RouteStopStatus @default(PENDING)
  Route      Route    @relation(fields: [routeId], references: [id])
  Shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@id([routeId, shipmentId])
}

model StockMovement {
  id            String        @id
  warehouseId   String
  itemId        String
  type          MovementType  @default(INBOUND)
  quantity      Int
  relatedId     String?
  timestamp     DateTime      @default(now())
  notes         String?
  InventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  Warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
}

model TransferOrder {
  id                                                 String         @id
  fromWarehouseId                                    String
  toWarehouseId                                      String
  itemId                                             String
  quantity                                           Int
  status                                             TransferStatus @default(PENDING)
  createdAt                                          DateTime       @default(now())
  updatedAt                                          DateTime       @default(now())
  Warehouse_TransferOrder_fromWarehouseIdToWarehouse Warehouse      @relation("TransferOrder_fromWarehouseIdToWarehouse", fields: [fromWarehouseId], references: [id])
  InventoryItem                                      InventoryItem  @relation(fields: [itemId], references: [id])
  Warehouse_TransferOrder_toWarehouseIdToWarehouse   Warehouse      @relation("TransferOrder_toWarehouseIdToWarehouse", fields: [toWarehouseId], references: [id])
}

model WarehouseItem {
  warehouseId   String
  itemId        String
  locationId    String
  quantity      Int           @default(0)
  minThreshold  Int           @default(0)
  maxThreshold  Int?
  expiresAt     DateTime?
  InventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  Location      Location      @relation(fields: [locationId], references: [id])
  Warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])

  @@id([warehouseId, itemId, locationId])
}

model TransporterLocation {
  id        String   @id @default(uuid())
  userId    String   @unique
  latitude  Float
  longitude Float
  timestamp DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Document {
  id          String   @id @default(uuid())
  shipmentId  String
  type        String
  url         String
  createdAt   DateTime @default(now())
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
}

model ShipmentUpdate {
  id          String          @id @default(uuid())
  shipment    Shipment        @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  shipmentId  String
  status      ShipmentStatus
  notes       String?
  createdAt   DateTime        @default(now())
}

// Notification model for user notifications
model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String
  title      String
  message    String?
  metadata   Json?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation("UserNotifications", fields: [userId], references: [id])
}

// Announcement model for admin mass announcements
model Announcement {
  id         String    @id @default(uuid())
  title      String
  message    String?
  roles      String[]
  userId     String?   // for individual announcement
  metadata   Json?
  authorId   String
  createdAt  DateTime  @default(now())

  author     User      @relation("AnnouncementAuthor", fields: [authorId], references: [id])
}

enum Role {
  admin
  client
  dispatcher
  carrier
  dev
  transporter
  warehouse_admin
}

enum ShipmentStatus {
  CREATED
  ASSIGNED
  IN_TRANSIT
  OUT_FOR_DEL
  DELIVERED
}

enum DockStatus {
  PENDING
  ARRIVED
  DEPARTED
  CANCELLED
}

enum MovementType {
  INBOUND
  OUTBOUND
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT
  DAMAGE
  RETURN
}

enum OfferStatus {
  pending
  accepted
  declined
}

enum TransferStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum RouteStopStatus {
  PENDING
  COMPLETED
  SKIPPED
}

// CRM: Define deals and related models
enum DealStage {
  PROSPECTING
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
  CLOSED_WON
  CLOSED_LOST
}

model Account {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  owner       User?     @relation(fields: [ownerId], references: [id])
  contacts    Contact[]
  deals       Deal[]
  invoices    Invoice[]
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])
  deals     Deal[]   @relation("ContactDeals")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deal {
  id        String    @id @default(uuid())
  title     String
  amount    Float
  stage     DealStage @default(PROSPECTING)
  accountId String?
  account   Account?  @relation(fields: [accountId], references: [id])
  contactId String?
  contact   Contact?  @relation("ContactDeals", fields: [contactId], references: [id])
  invoices  Invoice[]
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Billing: Define invoices and payments
enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  PAYPAL
  OTHER
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  accountId     String
  account       Account       @relation(fields: [accountId], references: [id])
  dealId        String?
  deal          Deal?         @relation(fields: [dealId], references: [id])
  amount        Float
  status        InvoiceStatus @default(PENDING)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  payments      Payment[]
  tenantId      String        
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  paymentNumber String        @unique
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  amount        Float
  paymentDate   DateTime
  method        PaymentMethod
  tenantId      String
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// SKU Attributes Definition
enum AttributeType {
  STRING
  NUMBER
}

model SkuAttributeDefinition {
  id        String       @id @default(uuid())
  key       String       @unique
  label     String
  type      AttributeType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  values    SkuAttributeValue[]
}

model SkuAttributeValue {
  inventoryItemId        String
  attributeDefinitionId  String
  valueString            String?
  valueNumber            Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  InventoryItem          InventoryItem @relation(fields: [inventoryItemId], references: [id])
  attributeDefinition    SkuAttributeDefinition @relation(fields: [attributeDefinitionId], references: [id])

  @@id([inventoryItemId, attributeDefinitionId])
}

// Incident type for damage or loss
enum IncidentType {
  DAMAGE
  LOSS
}

// Supplier model
model Supplier {
  id          String           @id @default(uuid())
  name        String
  contactInfo String?

  InventoryItem InventoryItem[]
  
  // Receiving & Put-Away Operations Relations
  asns          ASN[]
  appointments  Appointment[]
}

/// Warehouse report for scheduled daily summaries
model WarehouseReport {
  id            String    @id @default(uuid())
  warehouseId   String
  reportDate    DateTime  @default(now())
  totalSkus     Int
  totalQuantity Int
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])

  @@index([warehouseId])
}

// Chat feature models
model Conversation {
  id              String                      @id @default(uuid())
  name            String?                     // Optional custom name for group chats
  participants    ConversationParticipant[]
  messages        Message[]
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
}

model ConversationParticipant {
  id              String                      @id @default(uuid())
  conversationId  String
  userId          String
  conversation    Conversation                @relation(fields: [conversationId], references: [id])
  user            User                        @relation(fields: [userId], references: [id])
  @@index([conversationId, userId])
}

model Message {
  id              String                      @id @default(uuid())
  conversationId  String
  senderId        String
  content         String?
  contentType     String                      @default("text")
  fileUrl         String?
  status          MessageStatus               @default(SENT)
  deliveredAt     DateTime?
  readAt          DateTime?
  createdAt       DateTime                    @default(now())
  conversation    Conversation                @relation(fields: [conversationId], references: [id])
  sender          User                        @relation(fields: [senderId], references: [id])
  @@index([conversationId])
}

// Message status enum
enum MessageStatus {
  SENT
  DELIVERED
  READ
}

// === PICK & PACK OPERATIONS MODELS ===

// Wave represents a batch of orders to be picked together
model Wave {
  id              String      @id @default(uuid())
  waveNumber      String      @unique
  warehouseId     String
  status          WaveStatus  @default(CREATED)
  priority        Int         @default(1)
  plannedStartTime DateTime?
  actualStartTime DateTime?
  plannedEndTime  DateTime?
  actualEndTime   DateTime?
  createdBy       String
  assignedPickerId String?
  totalOrders     Int         @default(0)
  totalItems      Int         @default(0)
  completedItems  Int         @default(0)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  warehouse       Warehouse   @relation(fields: [warehouseId], references: [id])
  creator         User        @relation("WaveCreator", fields: [createdBy], references: [id])
  assignedPicker  User?       @relation("WaveAssignedPicker", fields: [assignedPickerId], references: [id])
  pickLists       PickList[]
  waveOrders      WaveOrder[]

  @@index([warehouseId, status])
  @@index([assignedPickerId])
}

// Links orders/shipments to waves
model WaveOrder {
  id         String   @id @default(uuid())
  waveId     String
  shipmentId String
  priority   Int      @default(1)
  addedAt    DateTime @default(now())

  // Relations
  wave       Wave     @relation(fields: [waveId], references: [id], onDelete: Cascade)
  shipment   Shipment @relation(fields: [shipmentId], references: [id])

  @@unique([waveId, shipmentId])
  @@index([waveId])
}

// Pick list generated for a wave
model PickList {
  id              String         @id @default(uuid())
  listNumber      String         @unique
  waveId          String
  warehouseId     String
  assignedPickerId String?
  status          PickListStatus @default(PENDING)
  pickingMethod   PickingMethod  @default(BATCH)
  zone            String?
  plannedStartTime DateTime?
  actualStartTime DateTime?
  plannedEndTime  DateTime?
  actualEndTime   DateTime?
  totalTasks      Int            @default(0)
  completedTasks  Int            @default(0)
  optimizedRoute  Json?          // Optimized picking route
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  wave            Wave           @relation(fields: [waveId], references: [id], onDelete: Cascade)
  warehouse       Warehouse      @relation(fields: [warehouseId], references: [id])
  assignedPicker  User?          @relation("PickListAssignedPicker", fields: [assignedPickerId], references: [id])
  pickTasks       PickTask[]
  packingSlips    PackingSlip[]

  @@index([waveId])
  @@index([assignedPickerId, status])
}

// Individual pick task for a specific item and location
model PickTask {
  id               String         @id @default(uuid())
  pickListId       String
  shipmentId       String
  inventoryItemId  String
  locationId       String
  quantityRequired Int
  quantityPicked   Int            @default(0)
  status           PickTaskStatus @default(PENDING)
  pickSequence     Int            // Order in which to pick
  pickerId         String?
  pickedAt         DateTime?
  verifiedBy       String?
  verifiedAt       DateTime?
  qcPassed         Boolean?
  qcNotes          String?
  substitutionId   String?        // If item was substituted
  damageQuantity   Int            @default(0)
  notes            String?
  barcodeScanned   Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  pickList         PickList       @relation(fields: [pickListId], references: [id], onDelete: Cascade)
  shipment         Shipment       @relation(fields: [shipmentId], references: [id])
  inventoryItem    InventoryItem  @relation(fields: [inventoryItemId], references: [id])
  location         Location       @relation(fields: [locationId], references: [id])
  picker           User?          @relation("PickTaskPicker", fields: [pickerId], references: [id])
  verifier         User?          @relation("PickTaskVerifier", fields: [verifiedBy], references: [id])
  substitution     InventoryItem? @relation("PickTaskSubstitution", fields: [substitutionId], references: [id])

  @@index([pickListId, pickSequence])
  @@index([status, pickerId])
  @@index([shipmentId])
}

// Packing slip generated for shipments
model PackingSlip {
  id              String            @id @default(uuid())
  slipNumber      String            @unique
  pickListId      String?
  shipmentId      String
  warehouseId     String
  packerId        String?
  status          PackingSlipStatus @default(PENDING)
  packingMethod   PackingMethod     @default(MANUAL)
  totalItems      Int               @default(0)
  packedItems     Int               @default(0)
  totalWeight     Float?
  totalDimensions Json?             // {length, width, height}
  packingStartedAt DateTime?
  packingCompletedAt DateTime?
  qcCompletedAt   DateTime?
  shippingLabelGenerated Boolean    @default(false)
  trackingNumber  String?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  pickList        PickList?         @relation(fields: [pickListId], references: [id])
  shipment        Shipment          @relation(fields: [shipmentId], references: [id])
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  packer          User?             @relation("PackingSlipPacker", fields: [packerId], references: [id])
  packingTasks    PackingTask[]
  packages        Package[]

  @@index([shipmentId])
  @@index([status, packerId])
}

// Individual packing task for items
model PackingTask {
  id               String         @id @default(uuid())
  packingSlipId    String
  inventoryItemId  String
  quantityToPack   Int
  quantityPacked   Int            @default(0)
  status           PackingTaskStatus @default(PENDING)
  packageId        String?
  packedAt         DateTime?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  packingSlip      PackingSlip    @relation(fields: [packingSlipId], references: [id], onDelete: Cascade)
  inventoryItem    InventoryItem  @relation(fields: [inventoryItemId], references: [id])
  package          Package?       @relation(fields: [packageId], references: [id])

  @@index([packingSlipId])
}

// Package/box used for packing
model Package {
  id              String         @id @default(uuid())
  packageNumber   String         @unique
  packingSlipId   String
  packageType     PackageType    @default(BOX)
  dimensions      Json?          // {length, width, height}
  weight          Float?
  maxWeight       Float?
  trackingNumber  String?
  status          PackageStatus  @default(OPEN)
  sealedAt        DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  packingSlip     PackingSlip    @relation(fields: [packingSlipId], references: [id], onDelete: Cascade)
  packingTasks    PackingTask[]

  @@index([packingSlipId])
}

// Enums for Pick & Pack Operations
enum WaveStatus {
  CREATED
  PLANNED
  RELEASED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PickListStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  PICKING_COMPLETE
  QC_PENDING
  QC_COMPLETE
  COMPLETED
  CANCELLED
}

enum PickingMethod {
  SINGLE_ORDER    // Pick one order at a time
  BATCH          // Pick multiple orders together
  ZONE           // Pick by warehouse zone
  WAVE           // Pick entire wave
}

enum PickTaskStatus {
  PENDING
  IN_PROGRESS
  PICKED
  QC_PENDING
  QC_PASSED
  QC_FAILED
  COMPLETED
  CANCELLED
}

enum PackingSlipStatus {
  PENDING
  IN_PROGRESS
  PACKED
  QC_PENDING
  QC_PASSED
  QC_FAILED
  SHIPPED
  CANCELLED
}

enum PackingTaskStatus {
  PENDING
  IN_PROGRESS
  PACKED
  COMPLETED
}

enum PackingMethod {
  MANUAL
  AUTOMATED
  SEMI_AUTOMATED
}

enum PackageType {
  BOX
  ENVELOPE
  TUBE
  PALLET
  CUSTOM
}

enum PackageStatus {
  OPEN
  SEALED
  SHIPPED
  DELIVERED
}

// === RECEIVING & PUT-AWAY OPERATIONS MODELS ===

// Advanced Shipping Notice - notification of incoming shipments
model ASN {
  id                String      @id @default(uuid())
  asnNumber         String      @unique
  supplierId        String?
  carrierName       String?
  driverName        String?
  driverPhone       String?
  vehicleInfo       String?
  warehouseId       String
  expectedArrival   DateTime
  actualArrival     DateTime?
  status            ASNStatus   @default(PENDING)
  totalPallets      Int         @default(0)
  totalCases        Int         @default(0)
  totalWeight       Float?
  referenceNumber   String?
  poNumber          String?
  trailerNumber     String?
  sealNumber        String?
  temperature       Float?      // For temperature-controlled shipments
  specialHandling   String?     // Fragile, hazmat, etc.
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  warehouse         Warehouse   @relation(fields: [warehouseId], references: [id])
  supplier          Supplier?   @relation(fields: [supplierId], references: [id])
  asnItems          ASNItem[]
  appointments      Appointment[]
  receipts          Receipt[]
  crossDockTasks    CrossDockTask[]

  @@index([warehouseId, status])
  @@index([expectedArrival])
}

// Items expected in an ASN
model ASNItem {
  id              String        @id @default(uuid())
  asnId           String
  inventoryItemId String
  expectedQty     Int
  receivedQty     Int           @default(0)
  unitCost        Float?
  lotNumber       String?
  expirationDate  DateTime?
  condition       ItemCondition @default(GOOD)
  notes           String?
  createdAt       DateTime      @default(now())

  // Relations
  asn             ASN           @relation(fields: [asnId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  receiptItems    ReceiptItem[]

  @@index([asnId])
  @@index([inventoryItemId])
}

// Appointment scheduling for dock doors
model Appointment {
  id              String            @id @default(uuid())
  appointmentNumber String          @unique
  asnId           String?
  warehouseId     String
  dockDoorId      String?
  supplierId      String?
  carrierName     String?
  driverName      String?
  driverPhone     String?
  scheduledDate   DateTime
  scheduledTimeSlot String          // e.g., "08:00-10:00"
  duration        Int               @default(120) // minutes
  status          AppointmentStatus @default(SCHEDULED)
  appointmentType AppointmentType   @default(RECEIVING)
  priority        Int               @default(1)
  specialRequirements String?
  equipment       String?           // Forklift, dock plate, etc.
  checkedInAt     DateTime?
  checkedOutAt    DateTime?
  actualDuration  Int?              // actual minutes
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  asn             ASN?              @relation(fields: [asnId], references: [id])
  supplier        Supplier?         @relation(fields: [supplierId], references: [id])
  dockDoor        DockDoor?         @relation(fields: [dockDoorId], references: [id])

  @@index([warehouseId, scheduledDate])
  @@index([status])
}

// Dock door management
model DockDoor {
  id              String        @id @default(uuid())
  doorNumber      String
  warehouseId     String
  doorType        DockDoorType  @default(RECEIVING)
  status          DockDoorStatus @default(AVAILABLE)
  equipment       String?       // Dock plate, forklift access, etc.
  maxTrailerSize  String?       // 53ft, 48ft, etc.
  heightRestriction Float?      // in feet
  isTemperatureControlled Boolean @default(false)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  warehouse       Warehouse     @relation(fields: [warehouseId], references: [id])
  appointments    Appointment[]
  receipts        Receipt[]

  @@unique([warehouseId, doorNumber])
  @@index([warehouseId])
}

// Receipt processing when goods arrive
model Receipt {
  id              String        @id @default(uuid())
  receiptNumber   String        @unique
  asnId           String?
  warehouseId     String
  dockDoorId      String?
  receivedBy      String
  status          ReceiptStatus @default(IN_PROGRESS)
  receiptMethod   ReceiptMethod @default(MANUAL)
  totalItems      Int           @default(0)
  receivedItems   Int           @default(0)
  discrepancies   Int           @default(0)
  startTime       DateTime?
  endTime         DateTime?
  qcRequired      Boolean       @default(false)
  qcCompleted     Boolean       @default(false)
  qcPassed        Boolean?
  qcNotes         String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  asn             ASN?          @relation(fields: [asnId], references: [id])
  warehouse       Warehouse     @relation(fields: [warehouseId], references: [id])
  dockDoor        DockDoor?     @relation(fields: [dockDoorId], references: [id])
  receiver        User          @relation("ReceiptReceiver", fields: [receivedBy], references: [id])
  receiptItems    ReceiptItem[]
  putAwayTasks    PutAwayTask[]

  @@index([warehouseId, status])
  @@index([receivedBy])
}

// Individual items being received
model ReceiptItem {
  id                String        @id @default(uuid())
  receiptId         String
  asnItemId         String?
  inventoryItemId   String
  expectedQty       Int
  receivedQty       Int
  damagedQty        Int           @default(0)
  condition         ItemCondition @default(GOOD)
  lotNumber         String?
  expirationDate    DateTime?
  unitCost          Float?
  discrepancyReason String?
  qcStatus          QCStatus?
  qcNotes           String?
  receivedAt        DateTime?
  notes             String?
  createdAt         DateTime      @default(now())

  // Relations
  receipt           Receipt       @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  asnItem           ASNItem?      @relation(fields: [asnItemId], references: [id])
  inventoryItem     InventoryItem @relation(fields: [inventoryItemId], references: [id])
  putAwayTasks      PutAwayTask[]

  @@index([receiptId])
  @@index([inventoryItemId])
}

// Put-away tasks to store received items
model PutAwayTask {
  id              String           @id @default(uuid())
  taskNumber      String           @unique
  receiptId       String
  receiptItemId   String
  warehouseId     String
  fromLocationId  String?          // Staging location
  toLocationId    String?          // Final storage location
  inventoryItemId String
  quantity        Int
  assignedTo      String?
  status          PutAwayStatus    @default(PENDING)
  priority        Int              @default(1)
  putAwayMethod   PutAwayMethod    @default(MANUAL)
  suggestedLocation String?        // AI/system suggested location
  equipment       String?          // Forklift, pallet jack, etc.
  startTime       DateTime?
  endTime         DateTime?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  receipt         Receipt          @relation(fields: [receiptId], references: [id])
  receiptItem     ReceiptItem      @relation(fields: [receiptItemId], references: [id])
  warehouse       Warehouse        @relation(fields: [warehouseId], references: [id])
  fromLocation    Location?        @relation("PutAwayFromLocation", fields: [fromLocationId], references: [id])
  toLocation      Location?        @relation("PutAwayToLocation", fields: [toLocationId], references: [id])
  inventoryItem   InventoryItem    @relation(fields: [inventoryItemId], references: [id])
  assignedUser    User?            @relation("PutAwayAssignedUser", fields: [assignedTo], references: [id])

  @@index([warehouseId, status])
  @@index([assignedTo])
  @@index([receiptId])
}

// Cross-dock operations - direct transfer without storage
model CrossDockTask {
  id              String            @id @default(uuid())
  taskNumber      String            @unique
  asnId           String?
  inboundShipmentId String?
  outboundShipmentId String
  warehouseId     String
  inventoryItemId String
  quantity        Int
  status          CrossDockStatus   @default(PENDING)
  priority        Int               @default(1)
  assignedTo      String?
  stagingLocation String?
  startTime       DateTime?
  endTime         DateTime?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  asn             ASN?              @relation(fields: [asnId], references: [id])
  inboundShipment Shipment?         @relation("CrossDockInbound", fields: [inboundShipmentId], references: [id])
  outboundShipment Shipment         @relation("CrossDockOutbound", fields: [outboundShipmentId], references: [id])
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  inventoryItem   InventoryItem     @relation(fields: [inventoryItemId], references: [id])
  assignedUser    User?             @relation("CrossDockAssignedUser", fields: [assignedTo], references: [id])

  @@index([warehouseId, status])
  @@index([assignedTo])
}

// Enums for Receiving & Put-Away Operations
enum ASNStatus {
  PENDING
  SCHEDULED
  IN_TRANSIT
  ARRIVED
  RECEIVING
  RECEIVED
  COMPLETED
  CANCELLED
}

enum ItemCondition {
  GOOD
  DAMAGED
  EXPIRED
  RETURNED
  QUARANTINE
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  RECEIVING
  SHIPPING
  PICKUP
  MAINTENANCE
  INSPECTION
}

enum DockDoorType {
  RECEIVING
  SHIPPING
  CROSS_DOCK
  MAINTENANCE
}

enum DockDoorStatus {
  AVAILABLE
  OCCUPIED
  SCHEDULED
  MAINTENANCE
  OUT_OF_SERVICE
}

enum ReceiptStatus {
  PENDING
  IN_PROGRESS
  QC_PENDING
  QC_FAILED
  COMPLETED
  CANCELLED
}

enum ReceiptMethod {
  MANUAL
  BARCODE
  RFID
  MOBILE
}

enum QCStatus {
  PENDING
  PASSED
  FAILED
  QUARANTINE
}

enum PutAwayStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PutAwayMethod {
  MANUAL
  DIRECTED
  AUTOMATED
  BATCH
}

enum CrossDockStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  STAGED
  COMPLETED
  CANCELLED
}

// Cycle Counting System Models
model CycleCount {
  id              String            @id @default(uuid())
  name            String
  description     String?
  warehouseId     String
  countType       CycleCountType    @default(RANDOM)
  frequency       CycleCountFrequency @default(MONTHLY)
  status          CycleCountStatus  @default(SCHEDULED)
  scheduledDate   DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  createdById     String
  assignedToId    String?
  lastCountDate   DateTime?
  nextCountDate   DateTime?
  settings        Json?             // Configuration like item selection criteria, location filters, etc.
  
  // Relations
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  createdBy       User              @relation("CycleCountCreatedBy", fields: [createdById], references: [id])
  assignedTo      User?             @relation("CycleCountAssignedTo", fields: [assignedToId], references: [id])
  tasks           CycleCountTask[]
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([warehouseId])
  @@index([status])
  @@index([scheduledDate])
}

model CycleCountTask {
  id              String            @id @default(uuid())
  cycleCountId    String
  locationId      String?
  zone            String?
  status          CycleCountTaskStatus @default(PENDING)
  assignedToId    String?
  startedAt       DateTime?
  completedAt     DateTime?
  notes           String?
  varianceFlag    Boolean           @default(false)
  accuracyRate    Float?            // Percentage of items counted correctly
  
  // Relations
  cycleCount      CycleCount        @relation(fields: [cycleCountId], references: [id], onDelete: Cascade)
  location        Location?         @relation("CycleCountTaskLocation", fields: [locationId], references: [id])
  assignedTo      User?             @relation("CycleCountTaskAssignedTo", fields: [assignedToId], references: [id])
  items           CycleCountItem[]
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([cycleCountId])
  @@index([status])
  @@index([assignedToId])
}

model CycleCountItem {
  id              String            @id @default(uuid())
  taskId          String
  itemId          String
  locationId      String
  expectedQty     Int
  countedQty      Int?
  variance        Int?              // countedQty - expectedQty
  variancePercent Float?            // (variance / expectedQty) * 100
  status          CycleCountItemStatus @default(PENDING)
  notes           String?
  countedById     String?
  countedAt       DateTime?
  reason          String?           // Reason for variance
  
  // Relations
  task            CycleCountTask    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  item            InventoryItem     @relation("CycleCountInventoryItem", fields: [itemId], references: [id])
  location        Location          @relation("CycleCountItemLocation", fields: [locationId], references: [id])
  countedBy       User?             @relation("CycleCountItemCountedBy", fields: [countedById], references: [id])
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([taskId])
  @@index([status])
  @@index([variance])
}

enum CycleCountType {
  RANDOM
  ABC_ANALYSIS
  VELOCITY_BASED
  LOCATION_BASED
  FULL_WAREHOUSE
  CUSTOM
}

enum CycleCountFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  CUSTOM
}

enum CycleCountStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum CycleCountTaskStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

enum CycleCountItemStatus {
  PENDING
  COUNTED
  VARIANCE_REVIEW
  APPROVED
  REJECTED
  RECOUNTED
}
