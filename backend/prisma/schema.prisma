generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant: Tenant model
model Tenant {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations to scoped entities
  users       User[]
  accounts    Account[]
  contacts    Contact[]
  deals       Deal[]
  invoices    Invoice[]
  payments    Payment[]
}

model User {
  id                                    String         @id @default(uuid())
  email                                 String         @unique
  password                              String
  role                                  Role
  createdAt                             DateTime       @default(now())
  updatedAt                             DateTime       @updatedAt
  username                              String         @unique
  phone                                 String?
  warehouseId                           String?
  warehouse                             Warehouse?     @relation("WarehouseAdmin", fields: [warehouseId], references: [id])
  DockSchedule                          DockSchedule[]
  Offer                                 Offer[]
  Route                                 Route[]
  carrierShipments                      Shipment[]     @relation("CarrierShipments")
  clientShipments                       Shipment[]     @relation("ClientShipments")
  dispatcherShipments                   Shipment[]     @relation("DispatcherShipments")
  Shipment_Shipment_transporterIdToUser Shipment[]     @relation("Shipment_transporterIdToUser")
  TransporterLocation                   TransporterLocation?
  notifications                         Notification[] @relation("UserNotifications")
  announcements                         Announcement[]  @relation("AnnouncementAuthor")
  accounts                              Account[]
  tenantId                              String?
  tenant                                Tenant?        @relation(fields: [tenantId], references: [id])
}

model Shipment {
  id                                String          @id @default(uuid())
  clientId                          String
  dispatcherId                      String?
  carrierId                         String?
  status                            ShipmentStatus  @default(CREATED)
  createdAt                         DateTime        @default(now())
  updatedAt                         DateTime        @default(now())
  deliveryEmail                     String
  deliveryName                      String
  deliveryPhone                     String
  description                       String?
  destination                       String
  height                            Float
  insurance                         Boolean
  length                            Float
  origin                            String
  pickupEmail                       String
  pickupName                        String
  pickupPhone                       String
  quantity                          Int
  reference                         String?
  shipmentDate                      DateTime
  specialInstructions               String?
  weight                            Float
  width                             Float
  serviceCarrierId                  String?
  trackingNumber                    String?
  transporterId                     String?
  destinationLat                    Float?
  destinationLng                    Float?
  originLat                         Float?
  originLng                         Float?
  deliveredAt                       DateTime?
  pickupStreet                      String
  pickupCity                        String
  pickupState                       String
  pickupZip                         String
  deliveryStreet                    String
  deliveryCity                      String
  deliveryState                     String
  deliveryZip                       String
  DockSchedule                      DockSchedule[]
  RouteShipment                     RouteShipment[]
  carrier                           User?           @relation("CarrierShipments", fields: [carrierId], references: [id])
  client                            User            @relation("ClientShipments", fields: [clientId], references: [id])
  dispatcher                        User?           @relation("DispatcherShipments", fields: [dispatcherId], references: [id])
  serviceCarrier                    Carrier?        @relation("ServiceCarrierShipments", fields: [serviceCarrierId], references: [id])
  User_Shipment_transporterIdToUser User?           @relation("Shipment_transporterIdToUser", fields: [transporterId], references: [id])
  warehouseId                       String?
  warehouse                         Warehouse?      @relation(fields: [warehouseId], references: [id])
  hazmat                            Boolean         @default(false)
  documents                         Document[]
  palletCount                       Int             @default(0)
  shipmentUpdates                   ShipmentUpdate[]
}

model Carrier {
  id        String     @id @default(uuid())
  name      String
  code      String     @unique
  apiKey    String?
  apiSecret String?
  shipments Shipment[] @relation("ServiceCarrierShipments")
}

model CompanySettings {
  id                         String   @id @default(uuid())
  companyName                String?
  logoUrl                    String?
  hasWarehouses              Boolean  @default(false)
  ownTransporters            Boolean  @default(false)
  useThirdPartyCarriers      Boolean  @default(true)
  enableTrackingInput        Boolean  @default(true)
  enableAddressValidation    Boolean  @default(true)
  enableRateQuotes           Boolean  @default(true)
  enablePickups              Boolean  @default(true)
  enableNotifications        Boolean  @default(true)
  enableDevTools             Boolean  @default(false)
  enableWarehouseHeatmap     Boolean  @default(true)
  primaryColor               String?   @default("#007AFF")
  secondaryColor             String?   @default("#FFFFFF")
  accentColor                String?   @default("#FFAA00")
  customDomain               String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  googleApiKey               String?
  useGoogleRouteOptimization Boolean  @default(false)
}

model Warehouse {
  id                                                     String          @id @default(uuid())
  name                                                   String
  address                                                String
  createdAt                                              DateTime        @default(now())
  updatedAt                                              DateTime        @default(now())
  DamageReport                                           DamageReport[]
  DockSchedule                                           DockSchedule[]
  Location                                               Location[]
  StockMovement                                          StockMovement[]
  TransferOrder_TransferOrder_fromWarehouseIdToWarehouse TransferOrder[] @relation("TransferOrder_fromWarehouseIdToWarehouse")
  TransferOrder_TransferOrder_toWarehouseIdToWarehouse   TransferOrder[] @relation("TransferOrder_toWarehouseIdToWarehouse")
  WarehouseItem                                          WarehouseItem[]
  shipments                                              Shipment[]
  administrators                                         User[]          @relation("WarehouseAdmin")
  warehouseReports                                       WarehouseReport[]
}

model DamageReport {
  id            String        @id @default(uuid())
  warehouseId   String
  itemId        String
  quantity      Int
  description   String?
  type          IncidentType  @default(DAMAGE)
  reasonCode    String?
  photoUrls     String[]      @default([])
  reportedAt    DateTime      @default(now())
  InventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  Warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
}

model DockSchedule {
  id                 String     @id
  warehouseId        String
  transporterId      String?
  shipmentId         String?
  scheduledArrival   DateTime
  scheduledDeparture DateTime?
  status             DockStatus @default(PENDING)
  notes              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime
  Shipment           Shipment?  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  User               User?      @relation(fields: [transporterId], references: [id])
  Warehouse          Warehouse  @relation(fields: [warehouseId], references: [id])
}

model InventoryItem {
  id            String          @id
  sku           String          @unique
  name          String
  description   String?
  unit          String
  unitCost      Float?          @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  DamageReport  DamageReport[]
  StockMovement StockMovement[]
  TransferOrder TransferOrder[]
  WarehouseItem WarehouseItem[]

  // Custom SKU attribute values
  attributeValues SkuAttributeValue[]

  // Supplier for the inventory item
  supplierId    String?
  supplier      Supplier?      @relation(fields: [supplierId], references: [id])
}

model Location {
  id            String          @id
  warehouseId   String
  zone          String?
  aisle         String?
  shelf         String?
  bin           String?
  x             Float?
  y             Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Warehouse     Warehouse       @relation(fields: [warehouseId], references: [id])
  WarehouseItem WarehouseItem[]

  @@index([warehouseId])
}

model Offer {
  id            String      @id @default(uuid())
  routeId       String
  transporterId String
  status        OfferStatus @default(pending)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Route         Route       @relation(fields: [routeId], references: [id])
  User          User        @relation(fields: [transporterId], references: [id])
}

model Route {
  id            String          @id @default(uuid())
  transporterId String
  geometry      String
  createdAt     DateTime        @default(now())
  Offer         Offer[]
  User          User            @relation(fields: [transporterId], references: [id])
  RouteShipment RouteShipment[]
}

model RouteShipment {
  routeId    String
  shipmentId String
  order      Int
  status     RouteStopStatus @default(PENDING)
  Route      Route    @relation(fields: [routeId], references: [id])
  Shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@id([routeId, shipmentId])
}

model StockMovement {
  id            String        @id
  warehouseId   String
  itemId        String
  type          MovementType  @default(INBOUND)
  quantity      Int
  relatedId     String?
  timestamp     DateTime      @default(now())
  notes         String?
  InventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  Warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
}

model TransferOrder {
  id                                                 String         @id
  fromWarehouseId                                    String
  toWarehouseId                                      String
  itemId                                             String
  quantity                                           Int
  status                                             TransferStatus @default(PENDING)
  createdAt                                          DateTime       @default(now())
  updatedAt                                          DateTime       @default(now())
  Warehouse_TransferOrder_fromWarehouseIdToWarehouse Warehouse      @relation("TransferOrder_fromWarehouseIdToWarehouse", fields: [fromWarehouseId], references: [id])
  InventoryItem                                      InventoryItem  @relation(fields: [itemId], references: [id])
  Warehouse_TransferOrder_toWarehouseIdToWarehouse   Warehouse      @relation("TransferOrder_toWarehouseIdToWarehouse", fields: [toWarehouseId], references: [id])
}

model WarehouseItem {
  warehouseId   String
  itemId        String
  locationId    String?
  quantity      Int           @default(0)
  minThreshold  Int           @default(0)
  maxThreshold  Int?
  expiresAt     DateTime?
  InventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  Location      Location?     @relation(fields: [locationId], references: [id])
  Warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])

  @@id([warehouseId, itemId])
}

model TransporterLocation {
  id        String   @id @default(uuid())
  userId    String   @unique
  latitude  Float
  longitude Float
  timestamp DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Document {
  id          String   @id @default(uuid())
  shipmentId  String
  type        String
  url         String
  createdAt   DateTime @default(now())
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
}

model ShipmentUpdate {
  id          String          @id @default(uuid())
  shipment    Shipment        @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  shipmentId  String
  status      ShipmentStatus
  notes       String?
  createdAt   DateTime        @default(now())
}

// Notification model for user notifications
model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String
  title      String
  message    String?
  metadata   Json?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation("UserNotifications", fields: [userId], references: [id])
}

// Announcement model for admin mass announcements
model Announcement {
  id         String    @id @default(uuid())
  title      String
  message    String?
  roles      String[]
  userId     String?   // for individual announcement
  metadata   Json?
  authorId   String
  createdAt  DateTime  @default(now())

  author     User      @relation("AnnouncementAuthor", fields: [authorId], references: [id])
}

enum Role {
  admin
  client
  dispatcher
  carrier
  dev
  transporter
  warehouse_admin
}

enum ShipmentStatus {
  CREATED
  ASSIGNED
  IN_TRANSIT
  OUT_FOR_DEL
  DELIVERED
}

enum DockStatus {
  PENDING
  ARRIVED
  DEPARTED
  CANCELLED
}

enum MovementType {
  INBOUND
  OUTBOUND
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT
  DAMAGE
  RETURN
}

enum OfferStatus {
  pending
  accepted
  declined
}

enum TransferStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum RouteStopStatus {
  PENDING
  COMPLETED
  SKIPPED
}

// CRM: Define deals and related models
enum DealStage {
  PROSPECTING
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
  CLOSED_WON
  CLOSED_LOST
}

model Account {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  owner       User?     @relation(fields: [ownerId], references: [id])
  contacts    Contact[]
  deals       Deal[]
  invoices    Invoice[]
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])
  deals     Deal[]   @relation("ContactDeals")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deal {
  id        String    @id @default(uuid())
  title     String
  amount    Float
  stage     DealStage @default(PROSPECTING)
  accountId String?
  account   Account?  @relation(fields: [accountId], references: [id])
  contactId String?
  contact   Contact?  @relation("ContactDeals", fields: [contactId], references: [id])
  invoices  Invoice[]
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Billing: Define invoices and payments
enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  PAYPAL
  OTHER
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  accountId     String
  account       Account       @relation(fields: [accountId], references: [id])
  dealId        String?
  deal          Deal?         @relation(fields: [dealId], references: [id])
  amount        Float
  status        InvoiceStatus @default(PENDING)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  payments      Payment[]
  tenantId      String        
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  paymentNumber String        @unique
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  amount        Float
  paymentDate   DateTime
  method        PaymentMethod
  tenantId      String
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// SKU Attributes Definition
enum AttributeType {
  STRING
  NUMBER
}

model SkuAttributeDefinition {
  id        String       @id @default(uuid())
  key       String       @unique
  label     String
  type      AttributeType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  values    SkuAttributeValue[]
}

model SkuAttributeValue {
  inventoryItemId        String
  attributeDefinitionId  String
  valueString            String?
  valueNumber            Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  InventoryItem          InventoryItem @relation(fields: [inventoryItemId], references: [id])
  attributeDefinition    SkuAttributeDefinition @relation(fields: [attributeDefinitionId], references: [id])

  @@id([inventoryItemId, attributeDefinitionId])
}

// Incident type for damage or loss
enum IncidentType {
  DAMAGE
  LOSS
}

// Supplier model
model Supplier {
  id          String           @id @default(uuid())
  name        String
  contactInfo String?

  InventoryItem InventoryItem[]
}

/// Warehouse report for scheduled daily summaries
model WarehouseReport {
  id            String    @id @default(uuid())
  warehouseId   String
  reportDate    DateTime  @default(now())
  totalSkus     Int
  totalQuantity Int
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])

  @@index([warehouseId])
}
